#!/home/alex/local/python_evns/web_env/bin/python
# -*- coding=utf-8 -*-
"""Ticket Query.

Usage:
  ticket [-g | -d | -z | -t | -k] <from_station> <to_station> <train_date>
  ticket (-h | --help)
  ticket --version

Options:
  -h --help     Show this screen.
  --version     Show version.
  -g            高铁.
  -d            动车.
  -z            直达.
  -t            特快.
  -k            快客.

"""
import sys
import json
import requests
import pprint

from prettytable import PrettyTable
from docopt import docopt


# def param_valid():
#     arg_len, option = len(sys.argv), '-g -d -z -t -k -h'.split()
#
#     if ('--help' or '-h' in sys.argv) and arg_len ==2:
#         print('tickets [-gdztk] from_station to_station train_date\n')
#         print('Option: ')
#         print('-h, --help   显示帮助菜单')
#         print('-g:          高铁')
#         print('-d:          动车')
#         print('-z:          直达')
#         print('-t:          特快')
#         print('-k:          快客')
#         sys.exit()
#     elif arg_len == 5 and sys.argv[1] in option:
#         return True
#     elif arg_len == 4 and sys.argv[1] not in option:
#         return False
#     else:
#         print('Using with wrong params.\
#               \ntickets [-gdztk] from_station to_station train_date\n')
#         sys.exit()


# def search_tickets(from_station, to_statton, date, filter_flag=False):
def search_tickets():
    url = 'https://kyfw.12306.cn/otn/leftTicket/queryX?leftTicketDTO.train_date=2016-11-08&leftTicketDTO.from_station=SZH&leftTicketDTO.to_station=HFH&purpose_codes=ADULT'
           
    headers = {'Content-Type':'application/json'}
    response = requests.get(url, headers=headers, verify=False)
    return json.loads(response.text)['data']


def show_data(trains):
    if not trains:
        print('没有查询结果。')
        return
    else:
        # table = PrettyTable(['车次', '始发站', '终点站', '出发站', '到达站',
        #                      '历时', '一等座', '二等座', '硬 座', '无 座'])
        table = PrettyTable(['车次', '始发/终点站', '出发站', '到达站', '时间',
                             '历时', '一等座', '二等座', '硬 座', '无 座'])
        for train in trains:
            data = train['queryLeftNewDTO']
            table.add_row([
                data.get('station_train_code'),
                # data.get('start_station_name'),
                # data.get('end_station_name'),
                '{}\n{}'.format(data.get('start_station_name'), data.get('end_station_name')),
                data.get('from_station_name'),
                data.get('to_station_name'),
                '{}\n{}'.format(data.get('start_time'), data.get('arrive_time')),
                data.get('lishi'),
                data.get('zy_num'),
                data.get('ze_num'),
                data.get('yz_num'),
                data.get('wz_num'),
            ])
        print(table)


def main():
    arguments = docopt(__doc__, version='Ticket Query 1.0')
    print(arguments)

    # print(sys.argv)
    # filter_flag = param_valid()
    # fs, ts, date = sys.argv[2:] if filter_flag else sys.argv[1:]
    # trains = search_tickets(from_station=fs, to_statton=ts,
    #                         date=date, filter_flag=


    trains = search_tickets()
    # pprint.pprint(trains[0])
    show_data(trains)


if __name__ == '__main__':
    main()